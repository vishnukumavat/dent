// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dent/elections/v1beta1/elections.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AdminNewVoterRegistrationRequest struct {
	RequestId     uint64    `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Otp           uint64    `protobuf:"varint,2,opt,name=otp,proto3" json:"otp,omitempty"`
	WalletAddress string    `protobuf:"bytes,3,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	ExpireAt      time.Time `protobuf:"bytes,4,opt,name=expire_at,json=expireAt,proto3,stdtime" json:"expire_at"`
}

func (m *AdminNewVoterRegistrationRequest) Reset()         { *m = AdminNewVoterRegistrationRequest{} }
func (m *AdminNewVoterRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*AdminNewVoterRegistrationRequest) ProtoMessage()    {}
func (*AdminNewVoterRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03484b5305df87ee, []int{0}
}
func (m *AdminNewVoterRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminNewVoterRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminNewVoterRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminNewVoterRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminNewVoterRegistrationRequest.Merge(m, src)
}
func (m *AdminNewVoterRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminNewVoterRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminNewVoterRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminNewVoterRegistrationRequest proto.InternalMessageInfo

func (m *AdminNewVoterRegistrationRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *AdminNewVoterRegistrationRequest) GetOtp() uint64 {
	if m != nil {
		return m.Otp
	}
	return 0
}

func (m *AdminNewVoterRegistrationRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *AdminNewVoterRegistrationRequest) GetExpireAt() time.Time {
	if m != nil {
		return m.ExpireAt
	}
	return time.Time{}
}

type Voter struct {
	VoterId       uint64 `protobuf:"varint,1,opt,name=voter_id,json=voterId,proto3" json:"voter_id,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (m *Voter) Reset()         { *m = Voter{} }
func (m *Voter) String() string { return proto.CompactTextString(m) }
func (*Voter) ProtoMessage()    {}
func (*Voter) Descriptor() ([]byte, []int) {
	return fileDescriptor_03484b5305df87ee, []int{1}
}
func (m *Voter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Voter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Voter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Voter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Voter.Merge(m, src)
}
func (m *Voter) XXX_Size() int {
	return m.Size()
}
func (m *Voter) XXX_DiscardUnknown() {
	xxx_messageInfo_Voter.DiscardUnknown(m)
}

var xxx_messageInfo_Voter proto.InternalMessageInfo

func (m *Voter) GetVoterId() uint64 {
	if m != nil {
		return m.VoterId
	}
	return 0
}

func (m *Voter) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

type Candidate struct {
	Id        uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Party     string    `protobuf:"bytes,3,opt,name=party,proto3" json:"party,omitempty"`
	CreatedAt time.Time `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *Candidate) Reset()         { *m = Candidate{} }
func (m *Candidate) String() string { return proto.CompactTextString(m) }
func (*Candidate) ProtoMessage()    {}
func (*Candidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_03484b5305df87ee, []int{2}
}
func (m *Candidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Candidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Candidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Candidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candidate.Merge(m, src)
}
func (m *Candidate) XXX_Size() int {
	return m.Size()
}
func (m *Candidate) XXX_DiscardUnknown() {
	xxx_messageInfo_Candidate.DiscardUnknown(m)
}

var xxx_messageInfo_Candidate proto.InternalMessageInfo

func (m *Candidate) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Candidate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Candidate) GetParty() string {
	if m != nil {
		return m.Party
	}
	return ""
}

func (m *Candidate) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

type PollOptions struct {
	CandidateId  uint64 `protobuf:"varint,1,opt,name=candidate_id,json=candidateId,proto3" json:"candidate_id,omitempty"`
	CurrentCount uint64 `protobuf:"varint,2,opt,name=current_count,json=currentCount,proto3" json:"current_count,omitempty"`
}

func (m *PollOptions) Reset()         { *m = PollOptions{} }
func (m *PollOptions) String() string { return proto.CompactTextString(m) }
func (*PollOptions) ProtoMessage()    {}
func (*PollOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_03484b5305df87ee, []int{3}
}
func (m *PollOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOptions.Merge(m, src)
}
func (m *PollOptions) XXX_Size() int {
	return m.Size()
}
func (m *PollOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PollOptions proto.InternalMessageInfo

func (m *PollOptions) GetCandidateId() uint64 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *PollOptions) GetCurrentCount() uint64 {
	if m != nil {
		return m.CurrentCount
	}
	return 0
}

type Poll struct {
	Id           uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PollName     string         `protobuf:"bytes,2,opt,name=poll_name,json=pollName,proto3" json:"poll_name,omitempty"`
	Options      []*PollOptions `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	IsActive     bool           `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	StartAt      time.Time      `protobuf:"bytes,5,opt,name=start_at,json=startAt,proto3,stdtime" json:"start_at"`
	PollDuration time.Duration  `protobuf:"bytes,6,opt,name=poll_duration,json=pollDuration,proto3,stdduration" json:"poll_duration,omitempty" yaml:"poll_duration"`
	IsEnded      bool           `protobuf:"varint,7,opt,name=is_ended,json=isEnded,proto3" json:"is_ended,omitempty"`
}

func (m *Poll) Reset()         { *m = Poll{} }
func (m *Poll) String() string { return proto.CompactTextString(m) }
func (*Poll) ProtoMessage()    {}
func (*Poll) Descriptor() ([]byte, []int) {
	return fileDescriptor_03484b5305df87ee, []int{4}
}
func (m *Poll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Poll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Poll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Poll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Poll.Merge(m, src)
}
func (m *Poll) XXX_Size() int {
	return m.Size()
}
func (m *Poll) XXX_DiscardUnknown() {
	xxx_messageInfo_Poll.DiscardUnknown(m)
}

var xxx_messageInfo_Poll proto.InternalMessageInfo

func (m *Poll) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Poll) GetPollName() string {
	if m != nil {
		return m.PollName
	}
	return ""
}

func (m *Poll) GetOptions() []*PollOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Poll) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Poll) GetStartAt() time.Time {
	if m != nil {
		return m.StartAt
	}
	return time.Time{}
}

func (m *Poll) GetPollDuration() time.Duration {
	if m != nil {
		return m.PollDuration
	}
	return 0
}

func (m *Poll) GetIsEnded() bool {
	if m != nil {
		return m.IsEnded
	}
	return false
}

func init() {
	proto.RegisterType((*AdminNewVoterRegistrationRequest)(nil), "dent.elections.v1beta1.AdminNewVoterRegistrationRequest")
	proto.RegisterType((*Voter)(nil), "dent.elections.v1beta1.Voter")
	proto.RegisterType((*Candidate)(nil), "dent.elections.v1beta1.Candidate")
	proto.RegisterType((*PollOptions)(nil), "dent.elections.v1beta1.PollOptions")
	proto.RegisterType((*Poll)(nil), "dent.elections.v1beta1.Poll")
}

func init() {
	proto.RegisterFile("dent/elections/v1beta1/elections.proto", fileDescriptor_03484b5305df87ee)
}

var fileDescriptor_03484b5305df87ee = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x31, 0x6f, 0xd3, 0x5c,
	0x14, 0x8d, 0x93, 0xb4, 0x71, 0x5e, 0xda, 0xea, 0xd3, 0x53, 0xf5, 0xe1, 0x16, 0xe1, 0x04, 0x57,
	0xa0, 0x0c, 0xc8, 0xa1, 0x65, 0x03, 0x21, 0xe4, 0x16, 0x86, 0x2c, 0x05, 0x59, 0xc0, 0xc0, 0x62,
	0xbd, 0xfa, 0x5d, 0xa2, 0x27, 0xd9, 0x7e, 0xc6, 0xef, 0xa6, 0x6d, 0xc4, 0x3f, 0x60, 0xea, 0xc8,
	0x9f, 0x61, 0xef, 0xd8, 0x91, 0xa9, 0xa0, 0x76, 0x41, 0x8c, 0xfc, 0x02, 0xf4, 0x9e, 0xed, 0xa6,
	0xa5, 0x5d, 0xba, 0xdd, 0x7b, 0x72, 0xee, 0xc9, 0x39, 0xd7, 0xd7, 0x26, 0x0f, 0x39, 0x64, 0x38,
	0x82, 0x04, 0x62, 0x14, 0x32, 0x53, 0xa3, 0xfd, 0xcd, 0x3d, 0x40, 0xb6, 0x39, 0x47, 0xfc, 0xbc,
	0x90, 0x28, 0xe9, 0xff, 0x9a, 0xe7, 0xcf, 0xd1, 0x8a, 0xb7, 0xbe, 0x3a, 0x91, 0x13, 0x69, 0x28,
	0x23, 0x5d, 0x95, 0xec, 0xf5, 0xfe, 0x44, 0xca, 0x49, 0x02, 0x23, 0xd3, 0xed, 0x4d, 0x3f, 0x8e,
	0x50, 0xa4, 0xa0, 0x90, 0xa5, 0x79, 0x45, 0x70, 0xff, 0x25, 0xf0, 0x69, 0xc1, 0xb4, 0x72, 0xf9,
	0xbb, 0xf7, 0xcd, 0x22, 0x83, 0x80, 0xa7, 0x22, 0xdb, 0x85, 0x83, 0xf7, 0x12, 0xa1, 0x08, 0x61,
	0x22, 0x14, 0x96, 0x9c, 0x10, 0x3e, 0x4d, 0x41, 0x21, 0xbd, 0x47, 0x48, 0x51, 0x96, 0x91, 0xe0,
	0x8e, 0x35, 0xb0, 0x86, 0xed, 0xb0, 0x5b, 0x21, 0x63, 0x4e, 0xff, 0x23, 0x2d, 0x89, 0xb9, 0xd3,
	0x34, 0xb8, 0x2e, 0xe9, 0x03, 0xb2, 0x72, 0xc0, 0x92, 0x04, 0x30, 0x62, 0x9c, 0x17, 0xa0, 0x94,
	0xd3, 0x1a, 0x58, 0xc3, 0x6e, 0xb8, 0x5c, 0xa2, 0x41, 0x09, 0xd2, 0x80, 0x74, 0xe1, 0x30, 0x17,
	0x05, 0x44, 0x0c, 0x9d, 0xf6, 0xc0, 0x1a, 0xf6, 0xb6, 0xd6, 0xfd, 0xd2, 0xb0, 0x5f, 0x1b, 0xf6,
	0xdf, 0xd6, 0x89, 0xb6, 0xed, 0xe3, 0xd3, 0x7e, 0xe3, 0xe8, 0x47, 0xdf, 0x0a, 0xed, 0x72, 0x2c,
	0x40, 0x6f, 0x4c, 0x16, 0x8c, 0x6d, 0xba, 0x46, 0xec, 0x7d, 0x5d, 0xcc, 0x1d, 0x76, 0x4c, 0x3f,
	0xe6, 0x37, 0xb8, 0x69, 0xde, 0xe0, 0xc6, 0xfb, 0x62, 0x91, 0xee, 0x0e, 0xcb, 0xb8, 0xe0, 0x0c,
	0x81, 0xae, 0x90, 0xe6, 0x85, 0x52, 0x53, 0x70, 0x4a, 0x49, 0x3b, 0x63, 0x29, 0x54, 0xa3, 0xa6,
	0xa6, 0xab, 0x64, 0x21, 0x67, 0x05, 0xce, 0xaa, 0x74, 0x65, 0x43, 0x77, 0x08, 0x89, 0x0b, 0x60,
	0x08, 0xfc, 0xb6, 0xb1, 0xba, 0xd5, 0x5c, 0x80, 0xde, 0x3b, 0xd2, 0x7b, 0x23, 0x93, 0xe4, 0x75,
	0x6e, 0xae, 0x80, 0xde, 0x27, 0x4b, 0x71, 0x6d, 0x6d, 0x9e, 0xb0, 0x77, 0x81, 0x8d, 0x39, 0xdd,
	0x20, 0xcb, 0xf1, 0xb4, 0x28, 0x20, 0xc3, 0x28, 0x96, 0xd3, 0x0c, 0xab, 0xe7, 0xb1, 0x54, 0x81,
	0x3b, 0x1a, 0xf3, 0x7e, 0x35, 0x49, 0x5b, 0xeb, 0x5e, 0x8b, 0x77, 0x97, 0x74, 0x73, 0x99, 0x24,
	0xd1, 0xa5, 0x8c, 0xb6, 0x06, 0x76, 0x75, 0xce, 0xe7, 0xa4, 0x23, 0x4b, 0x23, 0x4e, 0x6b, 0xd0,
	0x1a, 0xf6, 0xb6, 0x36, 0xfc, 0x9b, 0xaf, 0xd4, 0xbf, 0xe4, 0x39, 0xac, 0x67, 0xb4, 0xb6, 0x50,
	0x11, 0x8b, 0x51, 0xec, 0x83, 0xd9, 0x87, 0x1d, 0xda, 0x42, 0x05, 0xa6, 0xa7, 0x2f, 0x88, 0xad,
	0x90, 0x15, 0xa8, 0x77, 0xb5, 0x70, 0x8b, 0x5d, 0x75, 0xcc, 0x54, 0x80, 0xf4, 0x33, 0x59, 0x36,
	0xce, 0xeb, 0xc3, 0x76, 0x16, 0x8d, 0xca, 0xda, 0x35, 0x95, 0x97, 0x15, 0x61, 0xfb, 0x99, 0x16,
	0xf9, 0x7d, 0xda, 0xbf, 0x73, 0x65, 0xee, 0x91, 0x4c, 0x05, 0x42, 0x9a, 0xe3, 0xec, 0xcf, 0x69,
	0x7f, 0x75, 0xc6, 0xd2, 0xe4, 0xa9, 0x77, 0x85, 0xe0, 0x7d, 0xd5, 0xff, 0xbb, 0xa4, 0xb1, 0x5a,
	0x4a, 0x5f, 0x9d, 0x50, 0x11, 0x64, 0x1c, 0xb8, 0xd3, 0x31, 0xc9, 0x3a, 0x42, 0xbd, 0xd2, 0xed,
	0xf6, 0xe3, 0xe3, 0x33, 0xd7, 0x3a, 0x39, 0x73, 0xad, 0x9f, 0x67, 0xae, 0x75, 0x74, 0xee, 0x36,
	0x4e, 0xce, 0xdd, 0xc6, 0xf7, 0x73, 0xb7, 0xf1, 0xc1, 0xbc, 0xe2, 0xa3, 0xc3, 0x4b, 0x1f, 0x03,
	0x9c, 0xe5, 0xa0, 0xf6, 0x16, 0x8d, 0xd5, 0x27, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xbe,
	0xcb, 0x78, 0x2b, 0x04, 0x00, 0x00,
}

func (m *AdminNewVoterRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminNewVoterRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminNewVoterRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpireAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpireAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintElections(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintElections(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Otp != 0 {
		i = encodeVarintElections(dAtA, i, uint64(m.Otp))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintElections(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Voter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Voter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Voter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintElections(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.VoterId != 0 {
		i = encodeVarintElections(dAtA, i, uint64(m.VoterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Candidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Candidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Candidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintElections(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.Party) > 0 {
		i -= len(m.Party)
		copy(dAtA[i:], m.Party)
		i = encodeVarintElections(dAtA, i, uint64(len(m.Party)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintElections(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintElections(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentCount != 0 {
		i = encodeVarintElections(dAtA, i, uint64(m.CurrentCount))
		i--
		dAtA[i] = 0x10
	}
	if m.CandidateId != 0 {
		i = encodeVarintElections(dAtA, i, uint64(m.CandidateId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Poll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Poll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Poll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEnded {
		i--
		if m.IsEnded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.PollDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.PollDuration):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintElections(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintElections(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x2a
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintElections(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PollName) > 0 {
		i -= len(m.PollName)
		copy(dAtA[i:], m.PollName)
		i = encodeVarintElections(dAtA, i, uint64(len(m.PollName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintElections(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintElections(dAtA []byte, offset int, v uint64) int {
	offset -= sovElections(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AdminNewVoterRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovElections(uint64(m.RequestId))
	}
	if m.Otp != 0 {
		n += 1 + sovElections(uint64(m.Otp))
	}
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovElections(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpireAt)
	n += 1 + l + sovElections(uint64(l))
	return n
}

func (m *Voter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoterId != 0 {
		n += 1 + sovElections(uint64(m.VoterId))
	}
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovElections(uint64(l))
	}
	return n
}

func (m *Candidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovElections(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovElections(uint64(l))
	}
	l = len(m.Party)
	if l > 0 {
		n += 1 + l + sovElections(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovElections(uint64(l))
	return n
}

func (m *PollOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CandidateId != 0 {
		n += 1 + sovElections(uint64(m.CandidateId))
	}
	if m.CurrentCount != 0 {
		n += 1 + sovElections(uint64(m.CurrentCount))
	}
	return n
}

func (m *Poll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovElections(uint64(m.Id))
	}
	l = len(m.PollName)
	if l > 0 {
		n += 1 + l + sovElections(uint64(l))
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovElections(uint64(l))
		}
	}
	if m.IsActive {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartAt)
	n += 1 + l + sovElections(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.PollDuration)
	n += 1 + l + sovElections(uint64(l))
	if m.IsEnded {
		n += 2
	}
	return n
}

func sovElections(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozElections(x uint64) (n int) {
	return sovElections(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminNewVoterRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElections
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminNewVoterRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminNewVoterRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Otp", wireType)
			}
			m.Otp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Otp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElections
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthElections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthElections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpireAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipElections(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthElections
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Voter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElections
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Voter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Voter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			m.VoterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElections
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipElections(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthElections
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Candidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElections
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Candidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Candidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElections
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Party", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElections
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Party = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthElections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthElections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipElections(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthElections
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElections
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateId", wireType)
			}
			m.CandidateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CandidateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCount", wireType)
			}
			m.CurrentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipElections(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthElections
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Poll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElections
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Poll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Poll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElections
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthElections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthElections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &PollOptions{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthElections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthElections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthElections
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthElections
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.PollDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElections
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipElections(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthElections
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipElections(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowElections
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElections
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElections
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthElections
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupElections
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthElections
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthElections        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowElections          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupElections = fmt.Errorf("proto: unexpected end of group")
)
